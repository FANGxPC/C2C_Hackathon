// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  displayName   String?
  avatarUrl     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  studyMaterials StudyMaterial[]
  groupMemberships StudyGroupMember[]
  groupMessages  GroupMessage[]
  tasks          LearningTask[]
  dailyProgress  DailyProgress[]
  mockSessions   MockInterviewSession[]

  @@map("users")
}

model StudyMaterial {
  id          String       @id @default(cuid())
  ownerId     String
  title       String
  type        MaterialType
  subject     String
  topics      String[]
  url         String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("study_materials")
}

enum MaterialType {
  PDF
  YOUTUBE
  LINK
}

model StudyGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  topic       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members  StudyGroupMember[]
  messages GroupMessage[]

  @@map("study_groups")
}

model StudyGroupMember {
  id      String @id @default(cuid())
  groupId String
  userId  String
  role    String @default("member") // member, admin
  joinedAt DateTime @default(now())

  // Relations
  group StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("study_group_members")
}

model GroupMessage {
  id        String   @id @default(cuid())
  groupId   String
  authorId  String
  text      String
  type      String   @default("message") // message, announcement, resource
  createdAt DateTime @default(now())

  // Relations
  group  StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  author User       @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("group_messages")
}

model LearningTask {
  id          String    @id @default(cuid())
  userId      String
  title       String
  subject     String?
  description String?
  dueDate     DateTime?
  completed   Boolean   @default(false)
  completedAt DateTime?
  priority    String    @default("medium") // low, medium, high
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("learning_tasks")
}

model DailyProgress {
  id             String   @id @default(cuid())
  userId         String
  date           DateTime @db.Date
  completedCount Int      @default(0)
  totalCount     Int      @default(0)
  studyHours     Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("daily_progress")
}

model MockInterviewSession {
  id        String   @id @default(cuid())
  userId    String
  status    String   @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED
  type      String   @default("technical") // technical, behavioral, mixed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reviewed  Boolean  @default(false)
  review    String?
  rating    Int?

  // Relations
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers MockAnswer[]

  @@map("mock_interview_sessions")
}

model MockAnswer {
  id          String @id @default(cuid())
  sessionId   String
  questionIdx Int
  question    String
  answerText  String
  rating      Int?
  feedback    String?

  // Relations
  session MockInterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("mock_answers")
}